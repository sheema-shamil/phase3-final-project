{"ast":null,"code":"var _jsxFileName = \"/home/student/development/code/phase3/phase3-final-project/src/components/Meme.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Meme() {\n  _s();\n\n  const [meme, setMeme] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemes, setAllMemes] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(data => setAllMemes(data.data.memes));\n  }, []);\n\n  function getRandomImage() {\n    const memeImg = allMemes[Math.floor(Math.random() * allMemes.length)];\n    let url = memeImg.url;\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: url\n    }));\n  }\n\n  function handleChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({ ...prevMeme,\n      [name]: value\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top text\",\n        className: \"form-input\",\n        name: \"topText\",\n        value: meme.topText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom text\",\n        className: \"form-input\",\n        name: \"bottomText\",\n        value: meme.bottomText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form-button\",\n        onClick: getRandomImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme.randomImage,\n        className: \"meme-image\",\n        alt: \"meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme-text top\",\n        children: meme.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"meme-text bottom\",\n        children: meme.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Meme, \"mKJ++FUhyIq/I8NHSBLKm8StdJM=\");\n\n_c = Meme;\nexport default Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["React","useState","useEffect","Meme","meme","setMeme","topText","bottomText","randomImage","allMemes","setAllMemes","fetch","then","res","json","data","memes","getRandomImage","memeImg","Math","floor","random","length","url","prevMeme","handleChange","event","name","value","target"],"sources":["/home/student/development/code/phase3/phase3-final-project/src/components/Meme.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction Meme() {\n    const [meme, setMeme] = useState({\n        topText: \"\",\n        bottomText: \"\",\n        randomImage: \"http://i.imgflip.com/1bij.jpg\",\n    });\n\n    const [allMemes, setAllMemes] = useState([]);\n\n    useEffect(() => {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then((res) => res.json())\n            .then((data) => setAllMemes(data.data.memes));\n    }, []);\n\n    function getRandomImage() {\n        const memeImg = allMemes[Math.floor(Math.random() * allMemes.length)];\n        let url = memeImg.url;\n\n        setMeme((prevMeme) => ({\n            ...prevMeme,\n            randomImage: url,\n        }));\n    }\n\n    function handleChange(event) {\n        const { name, value } = event.target;\n        setMeme((prevMeme) => ({\n            ...prevMeme,\n            [name]: value,\n        }));\n    }\n\n    return (\n        <main>\n            <div className=\"form\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Top text\"\n                    className=\"form-input\"\n                    name=\"topText\"\n                    value={meme.topText}\n                    onChange={handleChange}\n                />\n                <input\n                    type=\"text\"\n                    placeholder=\"Bottom text\"\n                    className=\"form-input\"\n                    name=\"bottomText\"\n                    value={meme.bottomText}\n                    onChange={handleChange}\n                />\n                <button className=\"form-button\" onClick={getRandomImage}>\n                    Get a new meme image üñºÔ∏è\n                </button>\n            </div>\n\n            <div className=\"meme\">\n                <img src={meme.randomImage} className=\"meme-image\" alt=\"meme\" />\n                <h2 className=\"meme-text top\">{meme.topText}</h2>\n                <h2 className=\"meme-text bottom\">{meme.bottomText}</h2>\n            </div>\n        </main>\n    );\n}\n\nexport default Meme;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,IAAT,GAAgB;EAAA;;EACZ,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC;IAC7BK,OAAO,EAAE,EADoB;IAE7BC,UAAU,EAAE,EAFiB;IAG7BC,WAAW,EAAE;EAHgB,CAAD,CAAhC;EAMA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;EAEAC,SAAS,CAAC,MAAM;IACZS,KAAK,CAAC,mCAAD,CAAL,CACKC,IADL,CACWC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADnB,EAEKF,IAFL,CAEWG,IAAD,IAAUL,WAAW,CAACK,IAAI,CAACA,IAAL,CAAUC,KAAX,CAF/B;EAGH,CAJQ,EAIN,EAJM,CAAT;;EAMA,SAASC,cAAT,GAA0B;IACtB,MAAMC,OAAO,GAAGT,QAAQ,CAACU,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBZ,QAAQ,CAACa,MAApC,CAAD,CAAxB;IACA,IAAIC,GAAG,GAAGL,OAAO,CAACK,GAAlB;IAEAlB,OAAO,CAAEmB,QAAD,KAAe,EACnB,GAAGA,QADgB;MAEnBhB,WAAW,EAAEe;IAFM,CAAf,CAAD,CAAP;EAIH;;EAED,SAASE,YAAT,CAAsBC,KAAtB,EAA6B;IACzB,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkBF,KAAK,CAACG,MAA9B;IACAxB,OAAO,CAAEmB,QAAD,KAAe,EACnB,GAAGA,QADgB;MAEnB,CAACG,IAAD,GAAQC;IAFW,CAAf,CAAD,CAAP;EAIH;;EAED,oBACI;IAAA,wBACI;MAAK,SAAS,EAAC,MAAf;MAAA,wBACI;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,UAFhB;QAGI,SAAS,EAAC,YAHd;QAII,IAAI,EAAC,SAJT;QAKI,KAAK,EAAExB,IAAI,CAACE,OALhB;QAMI,QAAQ,EAAEmB;MANd;QAAA;QAAA;QAAA;MAAA,QADJ,eASI;QACI,IAAI,EAAC,MADT;QAEI,WAAW,EAAC,aAFhB;QAGI,SAAS,EAAC,YAHd;QAII,IAAI,EAAC,YAJT;QAKI,KAAK,EAAErB,IAAI,CAACG,UALhB;QAMI,QAAQ,EAAEkB;MANd;QAAA;QAAA;QAAA;MAAA,QATJ,eAiBI;QAAQ,SAAS,EAAC,aAAlB;QAAgC,OAAO,EAAER,cAAzC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAuBI;MAAK,SAAS,EAAC,MAAf;MAAA,wBACI;QAAK,GAAG,EAAEb,IAAI,CAACI,WAAf;QAA4B,SAAS,EAAC,YAAtC;QAAmD,GAAG,EAAC;MAAvD;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAI,SAAS,EAAC,eAAd;QAAA,UAA+BJ,IAAI,CAACE;MAApC;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAI,SAAS,EAAC,kBAAd;QAAA,UAAkCF,IAAI,CAACG;MAAvC;QAAA;QAAA;QAAA;MAAA,QAHJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAvBJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AA+BH;;GAhEQJ,I;;KAAAA,I;AAkET,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}